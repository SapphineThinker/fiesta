apply plugin: 'idea'
apply plugin: 'eclipse'

apply from: 'dependencies.gradle'

buildscript {
    ext.springBootVersion = "1.4.2.RELEASE"
    ext.springVersion = "4.3.4.RELEASE"

    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url 'http://repo.spring.io/plugins-release' }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:"+springBootVersion)
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
}

idea {
    project {
        languageLevel = '1.8'
        ipr.withXml { provider ->
            provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        }
    }
}

eclipse {
  classpath {
    //customizing the classes output directory:
    defaultOutputDir = file('build/bin')

    //default settings for downloading sources and Javadoc:
    downloadSources = true
    downloadJavadoc = false
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'project-report'
    apply plugin: 'signing'


    // Major Release: X.0.0: Breaking Changes. Should be avoided if possible, or planned for future release.
    // Minor Release: 0.X.0: Additional Features, updates from minor releases in Spring
    // Micro Release: 0.0.X: Bugfixes, non-breaking changes, updates from micro releases in Spring
    //
    // DO NOT FORGET TO DOCUMENT CHANGES IN HISTORY.MD
    //
    // Add a GitHub release for every new release: https://github.com/otto-de/edison-microservice/releases
    version = '1.0.0.RC3-SNAPSHOT'
    group = 'de.otto.edison'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        optional "org.springframework.boot:spring-boot-configuration-processor:" + springBootVersion
    }

    compileJava.dependsOn(processResources)

    jar {
        manifest.attributes provider: 'gradle'
    }

    test {
        // pass -Dspring.profiles.active=local and other system properties to the test task
        systemProperties = System.properties

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task allDeps(type: DependencyReportTask) {}

    idea {
        module {
            iml {
                withXml {
                    def moduleRoot = it.asNode()
                    def facetManager = moduleRoot.component.find { component -> component.'@name' == 'FacetManager'}
                    if (!facetManager) {
                        facetManager = moduleRoot.appendNode('component', [name: 'FacetManager'])
                    }

                    def springFacet = facetManager.facet.find { facet -> facet.'@type' == 'Spring' && facet.'@name' == 'Spring' }
                    if (!springFacet) {
                        springFacet = facetManager.appendNode('facet', [type: 'Spring', name: 'Spring'])
                        springFacet.appendNode('configuration')
                    }
                }
            }
        }
    }
}

